---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: thanos
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      chart: thanos
      version: 10.4.0
      sourceRef:
        kind: HelmRepository
        name: bitnami-charts
        namespace: flux-system
      interval: 5m
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  dependsOn:
    - name: kube-prometheus-stack
      namespace: monitoring
  values:
    objstoreConfig:
      type: s3
      config:
        insecure: true
    query:
      enabled: true
      replicaCount: 2
      podAntiAffinityPreset: hard
      replicaLabels:
        - replica
      dnsDiscovery:
        sidecarsService: kube-prometheus-stack-thanos-discovery
        sidecarsNamespace: monitoring
      ingress:
        enabled: true
        hostname: "thanos-query.${SECRET_DOMAIN}"
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"
    queryFrontend:
      enabled: false
    bucketweb:
      enabled: true
      replicaCount: 2
      podAntiAffinityPreset: hard
      ingress:
        enabled: true
        hostname: "thanos-bucketweb.${SECRET_DOMAIN}"
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"
    compactor:
      enabled: true
      retentionResolutionRaw: 14d
      retentionResolution5m: 30d
      retentionResolution1h: 180d
      ingress:
        enabled: true
        hostname: "thanos-compactor.${SECRET_DOMAIN}"
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"
      persistence:
        enabled: true
        storageClass: "cstor-csi-disk"
        size: 5Gi
    storegateway:
      enabled: true
      replicaCount: 2
      podAntiAffinityPreset: hard
      ingress:
        enabled: true
        hostname: "thanos-storegateway.${SECRET_DOMAIN}"
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"
      persistence:
        enabled: true
        storageClass: "cstor-csi-disk"
        size: 250Mi
    ruler:
      enabled: true
      replicaCount: 2
      podAntiAffinityPreset: hard
      dnsDiscovery:
        enabled: true
      alertmanagers:
        - http://kube-prometheus-stack-alertmanager.monitoring:9093
      clusterName: home-ops
      extraFlags:
        - "--web.prefix-header=X-Forwarded-Prefix"
      config: |-
        groups:
          - name: "PrometheusWatcher"
            rules:
              - alert: "PrometheusDown"
                expr: absent(up{job="kube-prometheus-stack-prometheus"})
      ingress:
        enabled: true
        hostname: "thanos-ruler.${SECRET_DOMAIN}"
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"
      persistence:
        enabled: true
        storageClass: "cstor-csi-disk"
        size: 250Mi
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  # valuesFrom:
  #   - targetPath: objstoreConfig.config.bucket
  #     kind: ConfigMap
  #     name: thanos-ceph-bucket
  #     valuesKey: BUCKET_NAME
  #   - targetPath: objstoreConfig.config.endpoint
  #     kind: ConfigMap
  #     name: thanos-ceph-bucket
  #     valuesKey: BUCKET_HOST
  #   - targetPath: objstoreConfig.config.region
  #     kind: ConfigMap
  #     name: thanos-ceph-bucket
  #     valuesKey: BUCKET_REGION
  #   - targetPath: objstoreConfig.config.access_key
  #     kind: Secret
  #     name: thanos-ceph-bucket
  #     valuesKey: AWS_ACCESS_KEY_ID
  #   - targetPath: objstoreConfig.config.secret_key
  #     kind: Secret
  #     name: thanos-ceph-bucket
  #     valuesKey: AWS_SECRET_ACCESS_KEY
